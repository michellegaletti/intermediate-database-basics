------------------ Practice Joins ------------------

-- #1
SELECT * FROM invoice i JOIN invoice_line il ON i.invoice_id = il.invoice_id 
WHERE il.unit_price >0.99;

-- #2
SELECT i.invoice_date, c.first_name, c.last_name, i.total 
FROM invoice i JOIN customer c ON i.invoice_id = c.customer_id;

-- #3
SELECT c.first_name, c.last_name, e.first_name, e.last_name
FROM customer c JOIN employee e ON c.support_rep_id = e.employee_id;

-- #4
SELECT al.title, art.name FROM album al JOIN artist art
ON al.artist_id = art.artist_id;

-- #5
SELECT pt.track_id FROM playlist_track pt JOIN playlist pl
ON pt.playlist_id = pl.playlist_id WHERE pl.name = 'Music';

-- #6 
SELECT t.name FROM track t JOIN playlist_track pt
ON pt.track_id = t.track_id WHERE pt.playlist_id = 5;

-- #7 
SELECT t.name, p.name FROM track t JOIN playlist_track pt 
ON t.track_id = pt.track_id
JOIN playlist p ON pt.playlist_id=p.playlist_id;

-- #8 
SELECT t.name, al.title FROM track t JOIN album al 
ON t.album_id = al.album_id
JOIN genre g ON t.genre_id = g.genre_id 
WHERE g.name = 'Alternative & Punk';

-- Black Diamond
SELECT t.name, p.name, g.name, al.title, art.name FROM track t
JOIN playlist_track pt ON t.track_id = pt.track_id 
JOIN playlist p ON pt.playlist_id = p.playlist_id
JOIN genre g ON t.genre_id = g.genre_id
JOIN album al ON al.album_id = t.album_id
JOIN artist art ON al.artist_id = art.artist_id
WHERE p.name = 'Music';


------------------ Practice nested queries ------------------

-- #1 
SELECT * FROM invoice WHERE invoice_id 
IN (SELECT invoice_id FROM invoice_line WHERE unit_price > 0.99);

-- #2
SELECT * FROM playlist_track WHERE playlist_id
IN (SELECT playlist_id FROM playlist WHERE name = 'Music');

-- #3
SELECT name FROM track WHERE track_id 
IN(SELECT track_id FROM playlist_track WHERE playlist_id = 5);

-- #4
SELECT * FROM track WHERE genre_id 
IN (SELECT genre_id FROM genre WHERE name = 'Comedy');

-- #5
SELECT * FROM track WHERE album_id
IN (SELECT album_id FROM album WHERE title = 'Fireball');

-- #6
SELECT * FROM track WHERE album_id 
IN (SELECT album_id FROM album WHERE artist_id
    IN (SELECT artist_id FROM artist WHERE name = 'Queen'));


------------------ Practice Updating Rows ------------------

-- #1 
UPDATE customer SET fax = NULL WHERE fax IS NOT NULL;

-- #2
UPDATE customer SET company = 'Self' WHERE company IS NULL;

-- #3 
UPDATE customer SET last_name = 'Thompson' 
WHERE first_name = 'Julia' AND last_name = 'Barnett'; 

-- #4 
UPDATE customer SET support_rep_id = 4 WHERE email = 'luisrojas@yahoo.cl';

-- #5 
UPDATE track SET composer = 'The darkness around us' 
WHERE composer IS NULL 
AND genre_id = (SELECT genre_id FROM genre WHERE name = 'Metal');


------------------ Group By ------------------

-- #1 
SELECT COUNT(*), g.name FROM track t 
JOIN genre g ON t.genre_id = g.genre_id GROUP BY g.name;

#2
SELECT COUNT(*), g.name FROM track t 
JOIN genre g ON t.genre_id = g.genre_id
WHERE g.name = 'Pop' OR g.name = 'Rock'
GROUP BY g.name;

-- #3
SELECT art.name, COUNT(*) FROM album al  
JOIN artist art ON al.artist_id = art.artist_id
GROUP BY art.name;


------------------ Use Distinct ------------------

-- #1
SELECT DISTINCT composer FROM track;

-- #2 
SELECT DISTINCT billing_postal_code FROM invoice;

-- #3 
SELECT DISTINCT company FROM customer;


------------------ Delete Rows ------------------

-- #1
DELETE FROM practice_delete WHERE type='bronze';

-- #2 
DELETE FROM practice_delete WHERE type = 'silver';

-- #3 
DELETE FROM practice_delete WHERE value = 150;


------------------ eCommerce Simulation ------------------


CREATE TABLE users(
	user_id SERIAL PRIMARY KEY,
  name VARCHAR(50),
  email VARCHAR(50)
);

CREATE TABLE products(
	product_id SERIAL PRIMARY KEY,
  name VARCHAR(50),
  price FLOAT
);

CREATE TABLE orders (
  order_id SERIAL PRIMARY KEY,
  product_id INTEGER,
  FOREIGN KEY (product_id) REFERENCES products(product_id)
);

INSERT INTO users (name, email) VALUES ('Michelle', 'mgal@gmail.com');
INSERT INTO users (name, email) VALUES ('Aaron', 'aaron@gmail.com');
INSERT INTO users (name, email) VALUES ('Kaila', 'kaila@gmail.com');

INSERT INTO products (name, price) VALUES ('Book', 4.99);
INSERT INTO products (name, price) VALUES ('Movie', 12.99);
INSERT INTO products (name, price) VALUES ('Trampoline', 98.50);

SELECT * FROM products;

INSERT INTO orders (product_id) VALUES (3);
INSERT INTO orders (product_id) VALUES (1);
INSERT INTO orders (product_id) VALUES (2);

SELECT * FROM orders;

-- Get all products for the first order.
SELECT * FROM products p JOIN orders o 
ON p.product_id = o.product_id 
WHERE o.order_id = 1;

-- Get all orders
SELECT * FROM products p JOIN orders o 
ON p.product_id = o.product_id;
-- SELECT * FROM orders;

-- Get the total cost of an order ( sum the price of all products on an order )
SELECT SUM(p.price) FROM products p JOIN orders o 
ON p.product_id = o.product_id
WHERE o.product_id = 2;

-- -- Add a foreign key reference from orders to users
ALTER TABLE orders ADD COLUMN user_id INTEGER REFERENCES users(user_id);
SELECT * FROM orders;

-- -- Update the orders table to link a user to each order
UPDATE orders 
SET user_id = 1;
SELECT * FROM orders;

-- Get all orders for a user
SELECT * FROM orders o JOIN users u 
ON o.user_id = u.user_id
WHERE u.user_id = 1;

-- Get how many orders each user has
SELECT COUNT(*) FROM orders o JOIN users u 
ON o.user_id = u.user_id
WHERE u.user_id = 1;


--------- Black Diamond ---------
-- Get the total amount on all orders for each user
SELECT SUM(p.price) FROM orders o JOIN users u 
ON o.user_id = u.user_id
JOIN products p ON o.product_id = p.product_id;
